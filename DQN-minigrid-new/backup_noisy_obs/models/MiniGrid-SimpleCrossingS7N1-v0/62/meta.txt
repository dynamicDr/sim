Namespace(alg_name='DQN', alpha=0.4, batch_size=64, beta=0.4, change_env=1, change_factor=-1, change_timestep=100000, change_type='noisy_obs', env_name='MiniGrid-SimpleCrossingS7N1-v0', epsilon_decay_step=100000.0, epsilon_init=0.01, epsilon_min=0.01, full_obs=1, gamma=0.99, lambda_init=1.0, lr=0.0001, max_epi_timestep=-1, max_timestep=200000, model_size='large', note='noisy_obs_EPER_alpha_0.4_beta_0.4', number=62, polyak=0.995, random_seed=4, replay='EPER', replay_max_size=100000, restart='backup/models/MiniGrid-SimpleCrossingS7N1-v0/0/164k.pth', save_rate=10000, train_freq=1)
DQN_large(
  (conv_layer): Sequential(
    (0): Conv2d(3, 64, kernel_size=(2, 2), stride=(1, 1))
    (1): ReLU()
    (2): MaxPool2d(kernel_size=(2, 2), stride=(2, 2), padding=1, dilation=1, ceil_mode=False)
    (3): Conv2d(64, 128, kernel_size=(2, 2), stride=(1, 1))
    (4): ReLU()
    (5): Conv2d(128, 256, kernel_size=(2, 2), stride=(1, 1))
    (6): ReLU()
  )
  (fc_layer): Sequential(
    (0): Linear(in_features=1024, out_features=256, bias=True)
    (1): Tanh()
    (2): Linear(in_features=256, out_features=128, bias=True)
    (3): Tanh()
    (4): Linear(in_features=128, out_features=3, bias=True)
  )
)
