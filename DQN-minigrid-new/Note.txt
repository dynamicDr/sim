======================================
ssh访问远程tensorboard

本机运行：
ssh -L 16006:127.0.0.1:6006 zzydty@172.29.244.218 -N -v -v

远端运行：
tensorboard --logdir=./runs --port=6006 --samples_per_plugin scalars=9999

本地浏览器访问：
http://localhost:16006

如果要重新运行，可以用以下指令杀死6006端口上的进程：
fuser -k 6006/tcp

========================================
Nohup：在ssh断开的情况下也能跑程序
删除上次的记录：
rm nohup.out

用nohup 运行一个python文件
nohup bash run.sh > nohup.out 2>&1 &

然后输入以下命令，这样程序就不会被终端影响，可以在后台运行，并且不会被杀死
disown

想要实时看到输出结果就再写一行代码
disown
tail -fn 50 nohup.out

查看后台进程的PID：

ps

如果关闭了命令行，可以这样查看进程PID：
ps aux | grep "train.py"

终止进程：
kill -9 PID

或者以上两条的合成：
kill -9 $(ps aux | grep "train.py" | awk '{print $2}')
kill -9 $(ps aux | grep "run.sh" | awk '{print $2}')


========================================
Register环境：
python minigrid/__init__.py

MiniGrid-DistShift1-v0 MiniGrid-SimpleCrossingS9N1-v0 MiniGrid-LavaCrossingS9N1-v0 MiniGrid-Unlock-v0 MiniGrid-RedBlueDoors-6x6-v0 MiniGrid-SimplePutNear-v0
========================================
Moving Obstacles: Adding movable obstacles in the maze that can change their position and direction to introduce non-stationarity in the environment.

Sticky Action: Introducing a probability for the agent to move an extra step in its current direction to add non-stationarity to the agent's actions.

RGB noise: Introducing a probability of skipping certain frames of observation to add non-stationarity to the agent's perception of the environment.

=======================================
手动控制：
 conda activate minigrid
 cd DQN-minigrid-new/
 python3 minigrid/manual_control.py --env-id MiniGrid-Unlock-v0

=======================================
场景1：
i=44
change_timestep=50000
max_timestep=300000
replay_max_size=50000
epsilon_decay_step=100000
batch_size=64
for seed in 668 669 670
do
    python train.py --env_name "MiniGrid-SimpleCrossingS9N1-v0" \
    --note noisy_obs_default\
    --number ${i} \
    --random_seed $seed \
    --model_size large \
    --epsilon_init 1 \
    --epsilon_decay_step ${epsilon_decay_step} \
    --replay_max_size ${replay_max_size} \
    --batch_size $batch_size  \
    --max_timestep  ${max_timestep}  \
    --replay default \
    --full_obs 1 \
    --lambda_init 1 \
    --change_env 1 \
    --change_timestep ${change_timestep} \
    --change_type noisy_obs \

  i=$((i+1))
    python train.py --env_name "MiniGrid-SimpleCrossingS9N1-v0" \
    --note noisy_obs_EPER_0.8_init_0.8\
    --number ${i} \
    --random_seed $seed \
    --model_size large \
    --epsilon_init 1 \
    --epsilon_decay_step ${epsilon_decay_step} \
    --replay_max_size ${replay_max_size} \
    --batch_size $batch_size \
    --max_timestep  ${max_timestep}  \
    --replay EPER \
    --full_obs 1 \
    --alpha 0.8 \
    --beta 0.8 \
    --lambda_init 0.8 \
    --change_env 1 \
    --change_timestep  ${change_timestep}  \
    --change_type noisy_obs

  i=$((i+1))
    python train.py --env_name "MiniGrid-SimpleCrossingS9N1-v0" \
    --note noisy_obs_EPER_0.7_init_0.8\
    --number ${i} \
    --random_seed $seed \
    --model_size large \
    --epsilon_init 1 \
    --epsilon_decay_step ${epsilon_decay_step} \
    --replay_max_size ${replay_max_size} \
    --batch_size $batch_size \
    --max_timestep  ${max_timestep}  \
    --replay EPER \
    --full_obs 1 \
    --alpha 0.7 \
    --beta 0.7 \
    --lambda_init 0.8 \
    --change_env 1 \
    --change_timestep  ${change_timestep}  \
    --change_type noisy_obs
      i=$((i+1))

    python train.py --env_name "MiniGrid-SimpleCrossingS9N1-v0" \
    --note noisy_obs_EPER_0.7_init_1\
    --number ${i} \
    --random_seed $seed \
    --model_size large \
    --epsilon_init 1 \
    --epsilon_decay_step ${epsilon_decay_step} \
    --replay_max_size ${replay_max_size} \
    --batch_size $batch_size \
    --max_timestep  ${max_timestep}  \
    --replay EPER \
    --full_obs 1 \
    --alpha 0.7 \
    --beta 0.7 \
    --lambda_init 1 \
    --change_env 1 \
    --change_timestep  ${change_timestep}  \
    --change_type noisy_obs
  i=$((i+1))
    python train.py --env_name "MiniGrid-SimpleCrossingS9N1-v0" \
    --note noisy_obs_PER_0.7\
    --number ${i} \
    --random_seed $seed \
    --model_size large \
    --epsilon_init 1 \
    --epsilon_decay_step ${epsilon_decay_step} \
    --replay_max_size ${replay_max_size} \
    --batch_size $batch_size \
    --max_timestep  ${max_timestep}  \
    --replay PER \
    --full_obs 1 \
    --alpha 0.7 \
    --beta 0.7 \
    --lambda_init 1 \
    --change_env 1 \
    --change_timestep  ${change_timestep}  \
    --change_type noisy_obs
      i=$((i+1))
done

=================================
i=19
change_timestep=50000
max_timestep=300000
replay_max_size=50000
epsilon_decay_step=200000
batch_size=64
noise_amp=0.75
for seed in 672 673
do
    python train.py --env_name "MiniGrid-LavaCrossingS9N1-v0" \
    --note noisy_obs_default\
    --number ${i} \
    --random_seed $seed \
    --model_size large \
    --epsilon_init 1 \
    --epsilon_decay_step ${epsilon_decay_step} \
    --replay_max_size ${replay_max_size} \
    --batch_size $batch_size  \
    --max_timestep  ${max_timestep}  \
    --replay default \
    --full_obs 1 \
    --lambda_init 1 \
    --change_env 1 \
    --change_timestep ${change_timestep} \
    --noise_amp $noise_amp \
    --change_type noisy_obs \

    i=$((i+1))

        python train.py --env_name "MiniGrid-LavaCrossingS9N1-v0" \
    --note noisy_obs_EPER_0.7_init_0.8\
    --number ${i} \
    --random_seed $seed \
    --model_size large \
    --epsilon_init 1 \
    --epsilon_decay_step ${epsilon_decay_step} \
    --replay_max_size ${replay_max_size} \
    --batch_size $batch_size \
    --max_timestep  ${max_timestep}  \
    --replay EPER \
    --full_obs 1 \
    --alpha 0.7 \
    --beta 0.7 \
    --lambda_init 0.8 \
    --change_env 1 \
    --change_timestep  ${change_timestep}  \
        --noise_amp $noise_amp\
    --change_type  noisy_obs
    i=$((i+1))
            python train.py --env_name "MiniGrid-LavaCrossingS9N1-v0" \
    --note noisy_obs_EPER_0.5_0.5_init_0.8\
    --number ${i} \
    --random_seed $seed \
    --model_size large \
    --epsilon_init 1 \
    --epsilon_decay_step ${epsilon_decay_step} \
    --replay_max_size ${replay_max_size} \
    --batch_size $batch_size \
    --max_timestep  ${max_timestep}  \
    --replay EPER \
    --full_obs 1 \
    --alpha 0.7 \
    --beta 0.5 \
    --lambda_init 0.8 \
    --change_env 1 \
    --change_timestep  ${change_timestep}  \
        --noise_amp $noise_amp\
    --change_type  noisy_obs
    i=$((i+1))

    python train.py --env_name "MiniGrid-LavaCrossingS9N1-v0" \
    --note noisy_obs_PER_0.5\
    --number ${i} \
    --random_seed $seed \
    --model_size large \
    --epsilon_init 1 \
    --epsilon_decay_step ${epsilon_decay_step} \
    --replay_max_size ${replay_max_size} \
    --batch_size $batch_size \
    --max_timestep  ${max_timestep}  \
    --replay PER \
    --full_obs 1 \
    --alpha 0.5 \
    --beta 0.7 \
    --lambda_init 1 \
    --change_env 1 \
    --change_timestep  ${change_timestep}  \
        --noise_amp $noise_amp\
    --change_type noisy_obs
      i=$((i+1))
done
================================
Door
i=37

change_timestep=50000
max_timestep=300000
replay_max_size=50000
epsilon_decay_step=150000
batch_size=128
#noise_amp=0.5
for seed in  4 5 6
do
for noise_amp in 1 1.2
do
#    python train.py --env_name "MiniGrid-Door-6x6-v0" \
#    --note noisy_obs_default_noise_${noise_amp}\
#    --number ${i} \
#    --random_seed $seed \
#    --model_size large \
#    --epsilon_init 1 \
#    --epsilon_decay_step ${epsilon_decay_step} \
#    --replay_max_size ${replay_max_size} \
#    --batch_size $batch_size  \
#    --max_timestep  ${max_timestep}  \
#    --replay default \
#    --full_obs 1 \
#    --lambda_init 1 \
#    --change_env 1 \
#    --change_timestep ${change_timestep} \
#    --noise_amp $noise_amp \
#    --change_type noisy_obs
#    i=$((i+1))
  for alpha in 0.7
  do
    python train.py --env_name "MiniGrid-Door-6x6-v0"\
    --note noisy_obs_EPER_noise_${noise_amp}_alpha_${alpha}\
    --number ${i} \
    --random_seed $seed \
    --model_size large \
    --epsilon_init 1 \
    --epsilon_decay_step ${epsilon_decay_step} \
    --replay_max_size ${replay_max_size} \
    --batch_size $batch_size \
    --max_timestep  ${max_timestep}  \
    --replay EPER \
    --full_obs 1 \
    --alpha ${alpha} \
    --beta 1.6 \
    --beta_min 0.01 \
    --beta_decay_step 100000 \
    --lambda_init 0.8 \
    --change_env 1 \
    --change_timestep ${change_timestep}  \
    --noise_amp $noise_amp\
    --change_type noisy_obs
    i=$((i+1))
    done
done
done